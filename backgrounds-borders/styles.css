body {
  background: pink;
}

.bg-wrapper {
  background: url(bgImg.jpeg) center / cover no-repeat;
  width: 25%;
  padding: 1rem;
  display: grid;
  place-items: center;
}

.translucent-border {
  border: 10px solid hsla(0, 0%, 100%, 0.5);
  border-radius: 2%;
  background: white;
  background-clip: padding-box; /**cos border box means background extends under border **/
  width: 50%;
  padding: 2rem;
  margin: 1em;
}

.box-shadow-wrapper {
  display: flex;
  flex-direction: row;
  align-items: center;
}

.box-shadow-multi-border {
  background: paleturquoise;
  /**next line uses the spread radius and 0 offset and blur -> solid border and
  can comma separate, just remeber they overlay so need to increase the spread, and
  can add a real box shadow as well **/
  box-shadow: 0 0 0 10px #655, 0 0 0 15px deeppink,
    0 2px 5px 15px rgba(0, 0, 0, 0.6);
  border-radius: 1%;
  width: 30%;
  height: auto;
  padding: 2rem;
  margin: 2em;
}

.box-shadow-multi-border-2 {
  border-radius: 50%;
  background: #1c187a;
  box-shadow: 0 0 0 10px #817dd1, 0 0 0 20px #5c58aa, 0 0 0 30px #3d3a84,
    0 0 0 40px #211f56;
  width: 10%;
  padding: 2rem;
  margin: 5em;
}

.outline-multi-border {
  background: paleturquoise;
  border: 10px solid #655;
  outline: 3px dashed deeppink;
  outline-offset: -15px; /**a negative offset moves it inside **/
  border-radius: 2%; /**note outline doesn't respect border radius **/
  width: 30%;
  padding: 2rem;
  margin: 2em;
}

.flexible-background-position {
  height: 50vh;
  padding: 10px; /** we want to respect the paddinng*/
  /* background: url(nature.svg) no-repeat #58a;
  background-position: right 10px bottom 10px; this is ok but if padding changes these change */
  /** or content box...*/
  /* background: url(nature.svg) no-repeat #58a bottom right; /**0r 100% 100% */
  /* background-origin: content-box; *which respects that padding */
  /** or using calc */
  background: url(nature.svg) no-repeat #58a;
  background-position: calc(100% - 20px) calc(100% - 10px);
}

.inner-rounding {
  width: 50%;
  margin: 2em;
  /**Outline doesn't follow rounding but box shadow does. 
  Overlay them and box-shadow coversthe gaps outline leaves on the corners */
  background: lightblue;
  border-radius: 0.9em;
  padding: 1em;
  box-shadow: 0 0 0 0.34em #655; /**pythagorus to work out the spread - or half the border radius will be enough */
  outline: 0.6em solid #655;
}

.horizontal-stripes {
  height: 10rem;
  margin: 2em;
  background: linear-gradient(
    #fb3 30%,
    #58a 0
  ); /**the colour stops meet - adjust the % for different proportions, note second one is zero cos if
  a colour stop has a position < any before it in list the same value is applied os this is same as setting x%
  on both */
  /** more than two colours... */
  /* background: linear-gradient(#fb3 33.3%, #58a 0, #58a 66.6%, yellowgreen 0); */
  background-size: 100% 2rem; /** and they are just a background so can apply a size*/
}

.vertical-stripes {
  height: 10rem;
  margin: 2em;
  background: linear-gradient(to right, #fb3 50%, #58a 0);
  background-size: 2rem 100%;
}

.diagonal-stripes {
  height: 10rem;
  margin: 2em;
  /**so bear in mind its a tiled repeated background... so need 4 stripes per tile to work*/
  background: linear-gradient(
    45deg,
    #fb3 25%,
    #58a 0,
    #58a 50%,
    #fb3 0,
    #fb3 75%,
    #58a 0
  );
  background-size: 4rem 4rem; /**bigger number here or get thinner stripes because...maths! (pythagorus to be specific - lengths of sides of right triangles */
  /* background-repeat: no-repeat; */
}

/** more flexible! change the angle and no need for tiling or background size*/
.better-diagonal-stripes {
  height: 10rem;
  margin: 2em;
  background: repeating-linear-gradient(35deg, #fb3, #58a 2rem);
  /** or solid stripes - see two stops per colour*/
  /* background: repeating-linear-gradient(35deg, #fb3 0 15px, #58a 0 30px); */
}

.flexible-subtle-stripes {
  height: 10rem;
  margin: 2em;
  /**Specify darker colour as bg and then strips of semi-trnasparent white so no need to work out what colour for lighter ones */
  background: #58a;
  background-image: repeating-linear-gradient(
    30deg,
    hsla(0, 0%, 100%, 0.1) 0 15px,
    transparent 0 30px
  );
}

.gingham {
  height: 10rem;
  margin: 2em;
  background: white;
  background-image: linear-gradient(
      90deg,
      rgba(200, 0, 0, 0.5) 50%,
      transparent 0
    ),
    linear-gradient(rgba(200, 0, 0, 0.5) 50%, transparent 0);
  background-size: 2rem 2rem;
  /* background-repeat: no-repeat; */
}

.basic-blueprint-grid {
  height: 10rem;
  margin: 2em;
  background: #58a;
  /** use 1px and the white lines stay that size no matter the cell size of the grid */
  background-image: linear-gradient(white 1px, transparent 0),
    linear-gradient(90deg, white 1px, transparent 0);
  background-size: 4rem 2rem;
  /* background-repeat: no-repeat; */
}

.better-blueprint-grid {
  height: 10rem;
  margin: 2em;
  background: #58a;
  background-image: linear-gradient(white 2px, transparent 0),
    linear-gradient(90deg, white 2px, transparent 0),
    linear-gradient(hsla(0, 0%, 100%, 0.3) 1px, transparent 0),
    linear-gradient(90deg, hsla(0, 0%, 100%, 0.3) 1px, transparent 0);
  background-size: 75px 75px, 75px 75px, 15px 15px, 15px 15px;
  /* background-repeat: no-repeat; */
}

.tiled-dots {
  height: 10rem;
  margin: 2em;
  background-color: #655;
  background-image: radial-gradient(tan 30%, transparent 0);
  background-size: 2rem 2rem;
}

.polka-dots {
  height: 10rem;
  margin: 2em;
  background-color: #655;
  background-image: radial-gradient(tan 30%, transparent 0),
    radial-gradient(tan 30%, transparent 0);
  background-size: 3rem 3rem;
  background-position: 0 0, 1.5rem 1.5rem; /** second background position must be half the tile size*/
}

/**checkerboards are harder...can't create a tile of 4 squares (two of each colour) using linear
gradients so we need to compose those squares from two right angle triangles and shift the position of 
second gradient...the repeat that pattern shifted over again */
.checkerboard {
  height: 10rem;
  margin: 2em;
  background: #eee;
  background-image: linear-gradient(45deg, #bbb 25%, transparent 0),
    linear-gradient(45deg, transparent 75%, #bbb 0),
    linear-gradient(45deg, #bbb 25%, transparent 0),
    linear-gradient(45deg, transparent 75%, #bbb 0);
  background-position: 0 0, 15px 15px, 15px 15px, 30px 30px;
  background-size: 30px 30px;
  /* background-repeat: no-repeat; */
}

/**Combines the opposite facng triangles (ie 1st with 2nd and 3rd with 4th) and makes the dark
grey a semi-transparent balck so can change base colour without needing to adjust the top colour.
Try switching in random colours to the gradient elements so can see how this works. */
.slightly-dryer-checkerboard {
  height: 10rem;
  margin: 2em;
  background: #eee;
  background-image: linear-gradient(
      45deg,
      rgba(0, 0, 0, 0.25) 25%,
      transparent 0,
      transparent 75%,
      rgba(0, 0, 0, 0.25) 0
    ),
    linear-gradient(
      45deg,
      rgba(0, 0, 0, 0.25) 25%,
      transparent 0,
      transparent 75%,
      rgba(0, 0, 0, 0.25) 0
    );
  background-position: 0 0, 15px 15px;
  background-size: 30px 30px;
  /* background-repeat: no-repeat; */
}

/**svg only need to change colour in one place and size with two edits */
.even-better-svg-checkerboard {
  height: 10rem;
  margin: 2em;
  background: #eee
    url('data:image/svg+xml,\
            <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" fill-opacity=".25" >\
            <rect x="50" width="50" height="50" />\
            <rect y="50" width="50" height="50" />\
            </svg>');
  background-size: 30px 30px;
}
